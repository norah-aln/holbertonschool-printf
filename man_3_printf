.\" Manpage for _printf
.\" Description: Custom printf function implementation
.\" Author: [Your Name]

.TH _PRINTF 3 "December 2023" "Version 1.0" "Custom Printf Manual"
.SH NAME
_printf \- formatted output conversion
.SH SYNOPSIS
.nf
.B #include "main.h"
.PP
.BI "int _printf(const char *" format ", ...);"
.fi
.SH DESCRIPTION
.PP
The
.B _printf
function produces output according to a
.I format
string that specifies how subsequent arguments are converted for output.
.PP
The
.I format
string is composed of zero or more directives: ordinary characters (not
.B % ),
which are copied unchanged to the output stream, and conversion
specifications, each of which results in fetching zero or more subsequent
arguments.
.PP
Each conversion specification is introduced by the character
.B %
and ends with a conversion specifier.
.SH CONVERSION SPECIFIERS
.PP
The conversion specifier and its meaning are:
.TP
.B c
The
.B int
argument is converted to an
.BR "unsigned char" ,
and the resulting character is written.
.TP
.B s
The
.B "const char *"
argument is expected to be a pointer to an array of character type (pointer
to a string). Characters from the array are written up to (but not including)
a terminating null byte ('\\0').
.TP
.B %
A ' % ' is written. No argument is converted. The complete conversion
specification is ' %% '.
.TP
.B d
.TQ
.B i
The
.B int
argument is converted to signed decimal notation. The precision, if any,
gives the minimum number of digits that must appear; if the converted value
requires fewer digits, it is padded on the left with zeros.
.SH RETURN VALUE
.PP
Upon successful return, the
.B _printf
function returns the number of characters printed (excluding the null byte
used to end output to strings).
.PP
If an output error is encountered, a negative value is returned.
.SH EXAMPLES
.PP
To print a simple string:
.RS
.nf
_printf("Hello, world!\\n");
.fi
.RE
.PP
To print a character and a string:
.RS
.nf
_printf("Character: %c, String: %s\\n", 'A', "test string");
.fi
.RE
.PP
To print integers:
.RS
.nf
_printf("Decimal: %d, Integer: %i\\n", 123, -456);
.fi
.RE
.PP
To print a percent sign:
.RS
.nf
_printf("Success rate: 100%%\\n");
.fi
.RE
.SH NOTES
.PP
This implementation of
.B _printf
is a custom version and does not include all the features of the standard
.BR printf (3)
function.
.PP
The following features are
.B not
supported in this implementation:
.RS
.IP \(bu 3
Flag characters (+, space, #, 0, -)
.IP \(bu 3
Field width
.IP \(bu 3
Precision
.IP \(bu 3
Length modifiers (h, l, L, etc.)
.IP \(bu 3
Floating-point conversions (f, F, e, E, g, G, a, A)
.IP \(bu 3
Other conversion specifiers (u, o, x, X, p, n, etc.)
.RE
.SH BUGS
.PP
If the
.I format
string is NULL, the function returns -1.
.PP
If an unknown conversion specifier is encountered, both the '%' character
and the specifier are printed to the output.
.SH SEE ALSO
.PP
.BR printf (3)
.SH AUTHORS
.PP
Developed as part of the Holberton School curriculum.
